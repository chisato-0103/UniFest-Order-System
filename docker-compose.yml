version: "3.8"

services:
  # PostgreSQLデータベース
  postgres:
    image: postgres:15-alpine
    container_name: unifest-postgres
    environment:
      POSTGRES_DB: unifest_order_system
      POSTGRES_USER: unifest_user
      POSTGRES_PASSWORD: unifest_secure_password_123
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backend/src/database/init-settings.sql:/docker-entrypoint-initdb.d/02-init-settings.sql
    ports:
      - "5432:5432"
    networks:
      - unifest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U unifest_user -d unifest_order_system"]
      interval: 30s
      timeout: 10s
      retries: 3

  # バックエンドAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: unifest-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://unifest_user:unifest_secure_password_123@postgres:5432/unifest_order_system
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: unifest_order_system
      DB_USER: unifest_user
      DB_PASSWORD: unifest_secure_password_123
      JWT_SECRET: your-super-secure-jwt-secret-for-production-change-this
      JWT_EXPIRE: 24h
      FRONTEND_URL: http://localhost:8080
      CORS_ORIGIN: http://localhost:8080
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - unifest-network
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # フロントエンド
  frontend:
    build:
      context: ./unifest-order-system
      dockerfile: Dockerfile
    container_name: unifest-frontend
    ports:
      - "8080:80"
    depends_on:
      - backend
    networks:
      - unifest-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis（セッション管理・キャッシュ用）
  redis:
    image: redis:7-alpine
    container_name: unifest-redis
    ports:
      - "6379:6379"
    networks:
      - unifest-network
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  unifest-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
